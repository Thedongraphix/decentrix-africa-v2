---
// Destructure the component properties from Astro.props
const { heading, content, isArrowVisible, isLinkVisible, linkTitle, linkURL, isAddressVisible, addressContent } = Astro.props;

// Define TypeScript interface for properties
interface Props {
  heading?: string;
  content?: string;
  isArrowVisible?: boolean;
  isLinkVisible?: boolean;
  linkTitle?: string;
  linkURL?: string;
  isAddressVisible?: boolean;
  addressContent?: string;
}

// Define SVG for the arrow right icon as a string
// This will be rendered as HTML using set:html when isArrowVisible is true
const arrowSVG = `<svg class="h-3.5 w-3.5 flex-shrink-0 overflow-visible text-neutral-800 transition duration-300 group-hover:translate-x-1 dark:text-neutral-200" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="m9 18 6-6-6-6"/>
</svg>`;

// Define utility CSS class strings
const containerClass =
  "group/contact-block flex w-full flex-col rounded-xl p-4 text-start md:p-5 lg:p-6";
const textClass =
  "mt-2 text-balance text-lg font-extrabold leading-normal text-neutral-800 dark:text-neutral-200";
const descriptionClass =
  "mt-1 text-pretty text-neutral-700 dark:text-neutral-300";
const flexClass = "flex items-start gap-x-1";
const hiddenClass = "max-lg:hidden";
const linkClass = "font-medium text-accent underline decoration-2 underline-offset-2 transition hover:text-yellow-400 dark:hover:text-yellow-400";

// Perform client-side hydration of the component, e.g. adding event listeners
export const prerender = true;
---

<!-- Contact icon block with optional arrow -->
<div class={containerClass}>
  <!-- Slot for custom icon or SVG -->
  <div>
    <slot />
  </div>

  <!-- If heading is provided, render it -->
  {
    heading && (
      <h3 class={textClass}>
        <div class={flexClass}>
          {heading}
          {isArrowVisible && <span set:html={arrowSVG} class={hiddenClass} />}
        </div>
      </h3>
    )
  }

  <!-- If content is provided, render it -->
  {content && <p class={descriptionClass}>{content}</p>}

  <!-- If link is visible, render it -->
  {isLinkVisible && linkTitle && linkURL && (
    <p class="mt-1 text-pretty">
      <a class={linkClass} href={linkURL}>
        {linkTitle}
      </a>
    </p>
  )}

  <!-- If address is visible, render it -->
  {isAddressVisible && addressContent && (
    <p class="mt-1 text-pretty text-neutral-700 dark:text-neutral-300">
      {addressContent}
    </p>
  )}
</div>
